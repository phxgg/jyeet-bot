plugins {
    id 'java'
}

group = 'org.phxgg'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url = 'https://m2.dv8tion.net/releases'
    }
    maven {
        url = 'https://jitpack.io'
    }
    maven {
        url = "https://maven.topi.wtf/releases"
    }
    maven {
        url = "https://maven.lavalink.dev/releases"
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    implementation 'net.iharder:base64:2.3.9'
    implementation 'net.dv8tion:JDA:6.1.0'

    implementation 'dev.arbjerg:lavaplayer:2.2.4'
    implementation 'dev.arbjerg:lavaplayer-ext-youtube-rotator:2.2.4'
    implementation 'dev.lavalink.youtube:v2:1.15.0'
    implementation 'com.github.topi314.lavasrc:lavasrc:4.8.1'
    implementation 'club.minnced:udpqueue-native-win-x86-64:0.2.9'

    implementation 'org.apache.commons:commons-lang3:3.15.0'
    implementation 'com.google.code.gson:gson:2.10'
    runtimeOnly 'ch.qos.logback:logback-classic:1.5.6'
}

tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Main-Class': 'bot.Main'
    }
    archiveClassifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('fatJarDev', Jar) {
    manifest {
        attributes 'Main-Class': 'bot.Main'
    }
    archiveClassifier = 'dev'
//    configurations.implementation.setCanBeResolved(true)
    from {
//        configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:deprecation']
}

test {
    useJUnitPlatform()
}
